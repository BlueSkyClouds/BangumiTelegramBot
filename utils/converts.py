"""Á±ªÂûãËΩ¨Êç¢"""
from collections import defaultdict
from typing import Literal, List

import telebot.types


def subject_type_to_emoji(type_: Literal[1, 2, 3, 4, 6]) -> str:
    """Â∞Üsubject_typeËΩ¨emoji"""
    if type_ == 1:
        return "üìö"
    elif type_ == 2:
        return "üå∏"
    elif type_ == 3:
        return "üéµ"
    elif type_ == 4:
        return "üéÆ"
    elif type_ == 6:
        return "üì∫"


def number_to_week(num: int) -> str:
    """Â∞Üweek dayËΩ¨Êç¢ÊàêÊòüÊúü"""
    if num == 1:
        return "ÊòüÊúü‰∏Ä"
    if num == 2:
        return "ÊòüÊúü‰∫å"
    if num == 3:
        return "ÊòüÊúü‰∏â"
    if num == 4:
        return "ÊòüÊúüÂõõ"
    if num == 5:
        return "ÊòüÊúü‰∫î"
    if num == 6:
        return "ÊòüÊúüÂÖ≠"
    if num == 7:
        return "ÊòüÊúüÊó•"
    else:
        return "Êú™Áü•"


def parse_markdown_v2(text: str) -> str:
    """markdown_v2 ËΩ¨ËØë"""
    return text.translate(
        str.maketrans(
            {
                '_': '\\_',
                '*': '\\*',
                '[': '\\[',
                ']': '\\]',
                '(': '\\(',
                ')': '\\)',
                '~': '\\~',
                '`': '\\`',
                '>': '\\>',
                '#': '\\#',
                '+': '\\+',
                '-': '\\-',
                '=': '\\=',
                '|': '\\|',
                '{': '\\{',
                '}': '\\}',
                '.': '\\.',
                '!': '\\!',
            }
        )
    )


def number_to_episode_type(type_: Literal[0, 1, 2, 3]) -> str:
    if type_ == 0:
        return "ep"
    if type_ == 1:
        return "sp"
    if type_ == 2:
        return "op"
    if type_ == 3:
        return "ed"


def collection_type_subject_type_str(
    subject_type: Literal[1, 2, 3, 4, 6], collection_type: Literal[1, 2, 3, 4, 5, None]
) -> str:
    if collection_type is None:
        return "Êî∂Ëóè"
    if collection_type == 5:
        return "ÊäõÂºÉ"
    if collection_type == 4:
        return "ÊêÅÁΩÆ"
    if collection_type == 3:
        if subject_type == 1:
            return "Âú®ËØª"
        if subject_type == 2:
            return "Âú®Áúã"
        if subject_type == 3:
            return "Âú®Âê¨"
        if subject_type == 4:
            return "Âú®Áé©"
        if subject_type == 6:
            return "Âú®Áúã"
    if collection_type == 2:
        if subject_type == 1:
            return "ËØªËøá"
        if subject_type == 2:
            return "ÁúãËøá"
        if subject_type == 3:
            return "Âê¨Ëøá"
        if subject_type == 4:
            return "Áé©Ëøá"
        if subject_type == 6:
            return "ÁúãËøá"
    if collection_type == 1:
        if subject_type == 1:
            return "ÊÉ≥ËØª"
        if subject_type == 2:
            return "ÊÉ≥Áúã"
        if subject_type == 3:
            return "ÊÉ≥Âê¨"
        if subject_type == 4:
            return "ÊÉ≥Áé©"
        if subject_type == 6:
            return "ÊÉ≥Áúã"
    return "????"


def collection_type_markup_text_list(subject_type: Literal[1, 2, 3, 4, 6]) -> list:
    if subject_type == 1:
        return ["ÊÉ≥ËØª", "ËØªËøá", "Âú®ËØª"]
    if subject_type == 2:
        return ["ÊÉ≥Áúã", "ÁúãËøá", "Âú®Áúã"]
    if subject_type == 3:
        return ["ÊÉ≥Âê¨", "Âê¨Ëøá", "Âú®Âê¨"]
    if subject_type == 4:
        return ["ÊÉ≥Áé©", "Áé©Ëøá", "Âú®Áé©"]
    if subject_type == 6:
        return ["ÊÉ≥Áúã", "ÁúãËøá", "Âú®Áúã"]


def subject_type_to_str(type_: Literal[1, 2, 3, 4, 6]) -> str:
    """Â∞Üsubject_typeËΩ¨ÊñáÂ≠ó"""
    if type_ == 1:
        return "‰π¶Á±ç"
    elif type_ == 2:
        return "Âä®Áîª"
    elif type_ == 3:
        return "Èü≥‰πê"
    elif type_ == 4:
        return "Ê∏∏Êàè"
    elif type_ == 6:
        return "ÂâßÈõÜ"
    else:
        return "???"


def score_to_str(score: float) -> str:
    if score is None:
        return "ÊöÇÊó†ËØÑÂàÜ"
    if score < 1.5:
        return "‰∏çÂøçÁõ¥ËßÜ"
    if score < 2.5:
        return "ÂæàÂ∑Æ"
    if score < 3.5:
        return "Â∑Æ"
    if score < 4.5:
        return "ËæÉÂ∑Æ"
    if score < 5.5:
        return "‰∏çËøá‰∏çÂ§±"
    if score < 6.5:
        return "ËøòË°å"
    if score < 7.5:
        return "Êé®Ëçê"
    if score < 8.5:
        return "ÂäõËçê"
    if score < 9.5:
        return "Á•û‰Ωú"
    if score < 10.5:
        return "Ë∂ÖÁ•û‰Ωú"
    return "???"


def convert_telegram_message_to_bbcode(
    text: str, entities: List[telebot.types.MessageEntity]
) -> str:
    if not entities:
        return text
    new_text = bytearray()
    encode = text.encode('utf-16-le')
    for i in range((len(encode) // 2) + 1):
        for entity in entities[::-1]:
            if i == entity.offset + entity.length:
                if entity.type == 'bold':
                    new_text += "[/b]".encode('utf-16-le')
                elif entity.type == 'italic':
                    new_text += "[/i]".encode('utf-16-le')
                elif entity.type == 'underline':
                    new_text += "[/u]".encode('utf-16-le')
                elif entity.type == 'strikethrough':
                    new_text += "[/s]".encode('utf-16-le')
                elif entity.type == 'spoiler':
                    new_text += "[/mask]".encode('utf-16-le')
                elif entity.type == 'code':
                    new_text += "[/code]".encode('utf-16-le')
                elif entity.type == 'pre':
                    new_text += "[/code]".encode('utf-16-le')
                elif entity.type == 'text_link':
                    new_text += "[/url]".encode('utf-16-le')
        for entity in entities:
            if i == entity.offset:
                if entity.type == 'bold':
                    new_text += "[b]".encode('utf-16-le')
                elif entity.type == 'italic':
                    new_text += "[i]".encode('utf-16-le')
                elif entity.type == 'underline':
                    new_text += "[u]".encode('utf-16-le')
                elif entity.type == 'strikethrough':
                    new_text += "[s]".encode('utf-16-le')
                elif entity.type == 'spoiler':
                    new_text += "[mask]".encode('utf-16-le')
                elif entity.type == 'code':
                    new_text += "[code]".encode('utf-16-le')
                elif entity.type == 'pre':
                    new_text += "[code]".encode('utf-16-le')
                elif entity.type == 'text_link':
                    new_text += (
                        "[url=".encode('utf-16-le')
                        + entity.url.encode('utf-16-le')
                        + "]".encode('utf-16-le')
                    )

        if i < len(encode) / 2:
            new_text += encode[i * 2 : i * 2 + 2]
    return new_text.decode('utf-16-le')


def remove_duplicate_newlines(text: str) -> str:
    """Âà†Èô§ÈáçË°å Â§üÁî®Â∞±Ë°å ÊáíÁöÑÊêûÊ≠£Âàô"""
    return text.translate(str.maketrans({'\n\n': '\n', '\n\n\n': '\n'}))


def full_group_by(items, key=lambda x: x):
    d = defaultdict(list)
    for item in items:
        d[key(item)].append(item)
    return d